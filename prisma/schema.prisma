generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  isPrivate Boolean @default(false)
  createdAt DateTime @default(now())
  profileViewCount Int @default(0)
  isDeleted Boolean @default(false)
  ideas Idea[]
  comments Comment[]
  likedComments LikedComments[]
  reviews Review[]
  follower UserFollow[] @relation("Followings")
  following UserFollow[] @relation("Followers")
  fromUser FollowRequest[] @relation("SentRequests")
  toUser FollowRequest[] @relation("ReceivedRequests")
  ideaStatus UserIdeaStatus[]
  role      Role     @default(USER)

  @@map("user")
}

model LikedComments {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
  @@map("liked_comments")

}

model FollowRequest {
  id Int @id @default(autoincrement())
  fromUser User @relation("SentRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  toUser User @relation("ReceivedRequests", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId String
  status RequestStatus @default(PENDING)
  createdAt DateTime @default(now())

  @@unique([fromUserId, toUserId])
  @@map("follow_request")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Idea {
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  title String 
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean
  viewCount Int @default(0)
  averageRating Float @default(0)
  completionCount Int @default(0)
  isChallenge Boolean 


  duration Duration? @relation(fields: [durationId], references: [id])
  durationId Int?

  categoryLinks   CategoryToIdea[]
  groupSizeLinks  GroupSizeToIdea[]

  priceRange PriceRange @relation(fields: [priceRangeId], references: [id])
  priceRangeId Int

  locationType LocationType

  comments Comment[] 

  reviews Review[]

  status UserIdeaStatus[]

  @@map("idea")
}

model CategoryToIdea {
  idea       Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([ideaId, categoryId])
  @@map("category_to_idea")
}

model GroupSizeToIdea {
  idea        Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      Int
  groupSize   GroupSize @relation(fields: [groupSizeId], references: [id], onDelete: Cascade)
  groupSizeId Int

  @@id([ideaId, groupSizeId])
  @@map("group_size_to_idea")
}


model UserFollow {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following User @relation("Followings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
  @@map("user_follow")
}

model UserIdeaStatus {
  id Int @id @default(autoincrement())
  ideaStatus IdeaStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId Int

  @@unique([userId, ideaId])
  @@map("user_idea_status")
}

model Review {
  id Int @id @default(autoincrement())
  rating Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String


  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId Int


  @@unique([authorId, ideaId]) // One Review for one Idea
  @@map("review")
}

model Comment {
  id Int @id @default(autoincrement())
  description String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId Int

  likedComment LikedComments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}



model PriceRange {
  id   Int    @id @default(autoincrement())
  label String @unique 
  min Int // Euro
  max Int?  // null for open ranges
  ideas Idea[]

  @@map("price_range")
}

model GroupSize {
  id         Int               @id @default(autoincrement())
  label      String            @unique
  min        Int
  max        Int?
  ideaLinks  GroupSizeToIdea[]

  @@map("group_size")
}

model Category {
  id        Int              @id @default(autoincrement())
  label     String           @unique
  ideaLinks CategoryToIdea[]

  @@map("category")
}

model Duration {
  id Int @id @default(autoincrement())
  label String @unique
  min Int // minutes
  max Int? // null for open ranges
  ideas Idea[]

  @@map("duration")
}


model Session {
  sid    String   @id
  sess   Json
  expire DateTime

  @@map("session")
}

enum LocationType {
  INDOOR 
  OUTDOOR
  HYBRID
  FLEXIBLE
}

enum Role {
  USER
  ADMIN
}

enum IdeaStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  FAVORITED
}

